Things to do for Jeliot:

"Trivial":

- Layout the method frames in more organized way

- Mnemonics and accelerator in Resources for internationalization

- Find & Replace for editor

- Possibility to open or extend the output console

- When array contains references and is the last one in the theater the references assigned to it won't be fully visible in the theater.

- The array variable names are incorrect in method frame names (e.g. array[0].method() -> 34j3jd<hashcode>.method and not array[0].method() or something like that.

- The user shouldn't be able to highlight the code while the animation is playing

- The previous output should be removed when rewind button is pressed.

- Change the size of the theater to the original size when rewinded. When the animation is finished the space for a theater is not contracted to the original size so the scrollbars are all the time active and that can cause misconceptions or just be annoying.

- Maybe new objects should always appear as the leftmost object and the other objects should be moved one step further.
                                                                                             _______
- The layout manager of the objects should probably place the objects into rows and columns  |OOOOO|
                                                                                             |OOOOO|
- Move the constant box lower when the method exceeds its area (This will need the ChangeListener implementation).

"Semi-trivial":

- It should be possible to add a ChangeListener, which would indicate any changes happened to the ActorContainer, into all the ActorContainers so the size of the Theater could be better controlled.

- Separate different files in the intermediate code to avoid wrong code highlights when calling other than main methods.

- Extend the method area if the method over runs the space where it should fit. For example more than 7 variables will be too much.

"Difficult" or laborous:

- All the static accesses should be changed to use a singleton pattern for each instance of Jeliot even inside one VM. This would permit several instances of Jeliot to be run in BlueJ and EJE. This will require at least changes in Classes: MCodeUtilities, EvaluationVisitor, Jeliot, Tracker, TrackerClock etc.

- Zooming

- Garbage collection

- Interaction mode for interaction between Jeliot and BlueJ and why not for experimentation in Jeliot.

- Enhance the interaction between Jeliot and BlueJ.

- Collaboration extension to BlueJ?

- Help associated with different commands/keywords of the programming language

- Java compilation with standard compiler to get compiler error messages first

- If we can find someone interested, we could integrate Jeliot into Eclipse and see what kind of possibilities it could offer. However, this will need a person that knows something about Eclipse and is motivated to dig in even more.

Bugs:

- this() method calls seem to work strangely. Every this(...) method call is switched to super(...) method call during the class file compilation. This can be seen from the bytecode of the extracted class files thus the interpretation is incorrect even though it does not crash the animation. (see Square2.java) (Fixed! The problem was in DynamicJava and happened especially with this() method call.)

- Fixed a couple of bugs in this and super method call handling. (Fixed!)

- Fixed a bug related to recursive toString calls. (Fixed!)

- Fixed a bug that related to recursive or otherwise combined method calls such as "method(method2());" which made the call tree visualization incorrect in some cases. (Fixed!)

Other issues that are already fixed:

- Enhanced run until with faster execution so that the animation duration will be changed to a very short time while running until a certain line. (Fixed!)

- The performance was flawed because the images for a history view were produced even when the history view was not visible. (Fixed!)