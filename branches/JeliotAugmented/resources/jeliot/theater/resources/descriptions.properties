description.method_stage = 

description.constant_box = Constant box instance represents a place where all the literal constants appear during the animation.In programming, the constants are types of data (with numeric or alfanumeric values) that stand always with the same value, without the possibility of changing its value during the execution of the program. One constant matches a fixed size in a allocate area in the main memory of the computer, where the program stores permanent values. e.g: the value of number PI = 3.141592. For convenience, the name of the constants is written in capitals in most of programming languages.

description.variable_actor = 
description.reference_variable_actor = 
description.class_actor = 
description.reference_actor = 

description.ci_actor = This actor represents the invocation of the(or one of many) class constructor/s during the execution of the program. This means that\n one object is being instantiated so, one concrete class is "being converted" in an object (class in execution). During the lifetime of this actor\n we can see the parameters of the class constructor method (if there are), and the instantiated class attributes that usually are assigned to them, although\nthis is not something compulsory.

description.object_stage_actor = ObjectStage is the graphical representation of the ObjectFrame. It contains the field of the object as VariableActors.\nIts meaning evidence the existence of the instantiated and referenced objects as they are actually in the executing program, and as something different\n from the concret class they are created from.

description.bubble_actor = BubbleActor is a kind of actor that represents one reference still for assignate, this is, one reference to one object-actor\nthat has to be instantiated, but still doesn't appear in the theater. When the object-actor is creater, the BubbleActor dissapears as a consecuence\n of the definitive assignation of the reference.

description.message_actor = This is a kind of actor with a merely execution-time supporting functionality. The content information is close related with\nthe execution flow of the executing program, this is, if-else statements, while or for loops, etc...

description.smi_actor = SMIActor represents graphically the static method invocation. The actor shows the  method name and the parameters in a similar way\n as Java syntax just replaces the variable references with their actual values. 

description.omi_actor = OMIActor represents graphically the object method invocation. The actor shows the object reference, the method name and the\n parameters in a similar way as Java syntax just replaces the variable references with their actual values.
