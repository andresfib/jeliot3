dialog.message.title = Message

message.nonparamconstructor_call  = It is \
                                    a non-parameter Constructor.
message.constructor_call          = It declares a reference to an object of 
message.constructor_call2         = and the \n constructor has parameter.
message.constructor_explanation   = The purpose of a constructor is to allow the fields of the object to\
                                    be initialized when the object is created.\
                                    a constructor satisfies the following two properties:\
                                    The name of the constructor must match the name of the class.\
                                    A constructor does not declare a return value.\
                                                                                          --<JAVA IN 60 MINUTES A DAY>
message.pointerargument           = This argument is not a primitive type.It is a pointer to the object.
message.pointerarg_explanation    = In Java, you do not specify that an argument is to be passed using call by-value.\
                                    It happens automatically, and is,in fact, your only option. Other programming languages\
                                    use call-by-reference and/or call-by-pointer, in which an argument is not copied into a \
                                    parameter. You cannot do call-by reference or call-by-pointer in Java. No matter what type\
                                    of argument you pass in to a method, the corresponding parameter will get a copy of that data,\
                                    which is exactly how call-by-value works.\
                                                                                                  --<JAVA IN 60 MINUTES A DAY>                                                                                                                                                         
message.argument1                 = Argument(s):
message.argument2                 = is (are) passed to
message.argument_explanation      = Argument is different with parameter.when an argument is passed into a parameter,\
                                    the argument's data is copied into the parameter. 
message.object                    = is instantiated.
message.object_explanation        = The phrase "instantiating a class" means for the same thing as "creating \
                                    an object."The object is created by the new keyword.
  
message.objectdelete              = is deleted so that the memory can be freed.
message.objectdelete_explanation  = This step is about garbage collection.However,in Java,there is no keyword or operator that \
                                    you can use to remove an object from memory.\
                                                                                                  --<JAVA IN 60 MINUTES A DAY>                                      
message.objectfield               = When an object is created,memory is allocated for \n the field: 
message.objectfield_explanation   = The new operator allocates memory for the object and then "zeroes" the memory \
                                    so that none of the object's fields will contain garbage. Instead, all fields \
                                    will have an initial value of zero.\
                                                                                            --<JAVA IN 60 MINUTES A DAY> 
message.arrow1                    = Constructor is invoked.\n The reference this is pointing to the 
message.arrow2                    = object.
message.arrow_explanation         = Constructor is invoked when the object gets created,\
                                    and it initializes the object.\
                                    Every object has a reference to itself represented by the this keyword. 

message.returnreference           = The runtime system returns a reference to the new object.
message.returnref_explanation     = When initialization is completed,the runtime system returns\
                                    a reference to the new object.                                                                                            

message.assignreference           = Assign to the variable a reference to the created object. 
message.assignref_explanation     = By using new keyword to assign the reference to the created object.\
                                    This reference is then stored in a variable.

message.arrayinstantiated         = Instantiating the array using the new keyword and specifying \nthe size of the array.
message.arrayinstan_explanation   = Because an array object is instantiated using the new keyword, the \
                                    memory is zeroed after it is allocated.\
                                                                                           --<JAVA IN 60 MINUTES A DAY>
message.arraydeleted              = An array object is deleted.
message.arraydeleted_explanation  = This step is garbage collection.An array object is removed \
                                    from memory.\

message.button                    = Next step
message.button1                   = Less details
message.button2                   = More details